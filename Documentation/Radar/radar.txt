
*****************************************************************************
******** Important commands *************************************************
*****************************************************************************



****** INIT ******

Public Function init()
    If MSComm1.PortOpen = True Then
        MSComm1.PortOpen = False
    End If
    
    If MSComm1.PortOpen = False Then
        MSComm1.Settings = "115200,N,8,1" 'Sets and returns the baud rate, parity, data bits, and stop bits as a string.
        MSComm1.CommPort = Val(txtCOMport.Text)
        MSComm1.PortOpen = True
    End If
    serial_write "INIT" & Chr(13)
    pause_sec 0.1
    svar = serial_read(5)
    MsgBox "Radar initialized:" & svar
End Function



****** SWEEP TIME ******

serial_write "SWEEP:TIME " & txtSweepTime & Chr(13)



****** FREQUENCY POINTS ******

serial_write "FREQUENCY:POINTS " & CStr(intPoints) & Chr(13)



****** INITIALIZE MEASUREMENT ******

    serial_write "SWEEP:MEASURE ON"
    pause_sec 0.1
    serial_write "TRIG:SOURCE:IMMEDIATE"
    pause_sec 0.1
    serial_write "SWEEP:NUMBERS 1"



****** THE MEASUREMENT ******  

    serial_write "TRIG:ARM" & Chr(13)
    pause_sec 0.2
    
    svar = serial_read(0.2) ' read out OK:s and throw away
    
    serial_write "TRACE:DATA ?" & Chr(13) //ASCII
    'serial_write "TRACE:RAW ?" & Chr(13) //binary
    pause_sec 0.2
    
    svar = serial_read(1)










*****************************************************************************
******** Below follows the original code...**********************************
*****************************************************************************

Option Explicit

'Serial port
Private m_flag_serial As Boolean
Private m_temp As String

' measure continous
Dim m_bln_stop_meas_cont As Boolean

Private cFourier As clsFourier

Private NumSamples As Long 'number of samples we're gonna use

Private mdbl_data_to_save_F() As Double
Private mdbl_data_to_save_D() As Double
Private mint_Nx As Integer

Dim m_bln_go As Boolean



Private Sub cboAngles_Click()
    txtAngleStep = Round(CDbl(cboAngles.Text) * 360 / 9600, 4)
End Sub

Private Sub cmdConvert_Click()
    txtConvSteps = CStr(CInt(9600 / 360 * CDbl(txtConvDeg)))
End Sub

Private Sub cmdInfo_Click()
    Dim svar As String
         
    serial_write "HARD:SYST ?" & Chr(13)
    pause_sec 0.1
    svar = serial_read(5)
    MsgBox svar
    
    serial_write "VERS:MAJO ?" & Chr(13)
    pause_sec 0.1
    svar = serial_read(5)
    MsgBox "VERS:MAJO: " & svar
    
    serial_write "VERS:MINO ?" & Chr(13)
    pause_sec 0.1
    svar = serial_read(5)
    MsgBox "VERS:MINO: " & svar
    
End Sub

''''''''''''
'  GUI
''''''''''''

Private Sub cmdInit_Click()
    init
End Sub

Private Sub cmdMeas_Click()
On Error GoTo cancel

    Dim fso 'As FileSystemObject
    Dim txtfil
    Dim strFilnamn As String
    Dim a As Integer
    Dim strHead As String
    Dim strTmp As String
    
    
    Dim x As Integer
    Dim i As Long
    Dim dblX() As Double
    Dim dblY() As Double
    Dim dbl_Dist() As Double
    
    Dim Nx As Integer
    Dim nn As String
        
    serial_write "SWEEP:MEASURE ON"
    pause_sec 0.1
    serial_write "TRIG:SOURCE:IMMEDIATE"
    pause_sec 0.1
    serial_write "SWEEP:NUMBERS 1"
    pause_sec 0.1
    
    Nx = CInt(txtPointRead)
    ReDim dblX(Nx, 1)
    
    For x = 0 To Nx - 1
        dblX(x, 0) = x + 1
    Next x
    nn = ""
    
    dblY = measure(Nx)
    
    plot_clear
    
    plot_data_Freq dblX, Nx, dblY, nn
        
    
      
    'välj en textfil att spara data i:
    Set fso = CreateObject("Scripting.FileSystemObject")
    With CommonDialog1
        .CancelError = True
        .Filter = "Text |*.txt"
        .FilterIndex = 1
        .ShowSave
        strFilnamn = CStr(.FileName)
    End With
    
    Set txtfil = fso.CreateTextFile(strFilnamn, True)
    txtfil.writeline "Date:  " & Date
    txtfil.writeline "Time:  " & Time
    txtfil.writeline "Comment: " & txtComment.Text
    
    For i = 0 To Nx
        txtfil.writeline CStr(dblY(i, 0)) '& " " & CStr(mdbl_data_to_save_D(i, 0))
    Next
    txtfil.Close
    
Exit Sub
cancel:
    
   
End Sub

Private Sub cmdMeasCont_Click()
    Dim x As Integer
    Dim i As Long
    Dim dblX() As Double
    Dim dblY() As Double
    Dim dbl_Dist() As Double
    
    Dim Nx As Integer
    Dim nn As String
    cmdSave.Enabled = False
    plot_clear
    
    serial_write "SWEEP:MEASURE ON"
    pause_sec 0.1
    serial_write "TRIG:SOURCE:IMMEDIATE"
    pause_sec 0.1
    serial_write "SWEEP:NUMBERS 1"
    pause_sec 0.1
    
    m_bln_stop_meas_cont = False
    Nx = CInt(txtPointRead)
    ReDim dblX(Nx, 1)
    
    For x = 0 To Nx - 1
        dblX(x, 0) = x + 1
    Next x
    
    nn = ""
    
    While m_bln_stop_meas_cont = False
        dblY = measure(Nx)
           
        plot_data_Freq dblX, Nx, dblY, nn
        
      '  If prep_fft Then
      '      dbl_Dist = fft(dblY, Nx)
      '      plot_data_Dist dblX, Nx, dbl_Dist, nn
      '  End If
        
        pause_sec 1
        
    Wend
    mdbl_data_to_save_F = dblY
    mdbl_data_to_save_D = dbl_Dist
    mint_Nx = Nx
    
    cmdSave.Enabled = True
End Sub


'Private Sub cmdMeasCont_Click()
'    Dim x As Integer
'    Dim i As Long
'    Dim dblX() As Double
'    Dim dblY() As Double
'    Dim dbl_Dist() As Double
'
'    Dim Nx As Integer
'    Dim nn As String
'    cmdSave.Enabled = False
'    plot_clear
'
'    serial_write "SWEEP:MEASURE ON"
'    pause_sec 0.1
'    serial_write "SWEEP: NUMBERS 1"
'    pause_sec 0.1
'
'    m_bln_stop_meas_cont = False
'    Nx = CInt(txtPointRead)
'    ReDim dblX(Nx, 1)
'
'    For x = 0 To Nx - 1
'        dblX(x, 0) = x + 1
'    Next x
'
'    nn = ""
'
'    While m_bln_stop_meas_cont = False
'        dblY = measure(Nx)
'
'        plot_data_Freq dblX, Nx, dblY, nn
'
'        If prep_fft Then
'            dbl_Dist = fft(dblY, Nx)
'            plot_data_Dist dblX, Nx, dbl_Dist, nn
'        End If
'
'        pause_sec 1
'
'    Wend
'    mdbl_data_to_save_F = dblY
'    mdbl_data_to_save_D = dbl_Dist
'    mint_Nx = Nx
'
'    cmdSave.Enabled = True
'End Sub

Private Sub cmdMeasContStop_Click()
    m_bln_stop_meas_cont = True
End Sub




Private Sub cmdReadPoints_Click()
    Dim svar As String
     
    serial_write "FREQUENCY:POINTS ?" & Chr(13)
    pause_sec 0.1
    svar = serial_read(5)
    txtPointRead = CInt(svar)
    cboSamples.Text = txtPointRead
 
End Sub

Private Sub cmdReadStart_Click()
    Dim svar As String
         
    serial_write "FREQUENCY:START ?" & Chr(13)
    pause_sec 0.1
    svar = serial_read(5)
    txtStartRead = CDbl(svar) / 1000000000#
    txtStart = txtStartRead
  
End Sub

Private Sub cmdReadStop_Click()
    Dim svar As String
   
    serial_write "FREQUENCY:STOP ?" & Chr(13)
    pause_sec 0.1
    svar = serial_read(5)
    txtStopRead = CDbl(svar) / 1000000000#
    txtStop = txtStopRead
End Sub

Private Sub cmdReadSweepTime_Click()
    Dim svar As String
    
    serial_write "SWEEP:TIME ?" & Chr(13)
    pause_sec 0.1
    svar = serial_read(5)
    txtSweepTimeRead = svar
    txtSweepTime = txtSweepTimeRead
    
   
End Sub

Private Sub cmdSave_Click()
On Error GoTo cancel
    Dim fso 'As FileSystemObject
    Dim txtfil
    Dim strFilnamn As String
    Dim a As Integer
    Dim i As Integer
    Dim strHead As String
    Dim strTmp As String
    
    
   
      
    'välj en textfil att spara data i:
    Set fso = CreateObject("Scripting.FileSystemObject")
    With CommonDialog1
        .CancelError = True
        .Filter = "Text |*.txt"
        .FilterIndex = 1
        .ShowSave
        strFilnamn = CStr(.FileName)
    End With
    
    Set txtfil = fso.CreateTextFile(strFilnamn, True)
    'txtfil.writeline "Date:  " & Date
    'txtfil.writeline "Time:  " & Time
             
    For i = 0 To mint_Nx
        txtfil.writeline CStr(mdbl_data_to_save_F(i, 0)) '& " " & CStr(mdbl_data_to_save_D(i, 0))
        
    Next
    txtfil.Close
    
Exit Sub
cancel:
End Sub





''''''''''''
' Functions
''''''''''''

Private Function plot_data_Freq(dblX() As Double, Nx As Integer, dblY() As Double, nn As String)
    Dim x As Integer
        
    TChart1.Series(0).Name = nn
            
    'Cartesian
    TChart1.Series(0).Clear
    TChart1.Series(0).Active = True
        
    For x = 0 To Nx - 1
       TChart1.Series(0).AddXY dblX(x, 0), dblY(x, 0), "", 0
    Next x
   
End Function


Private Function plot_data_Dist(dblX() As Double, Nx As Integer, dblY() As Double, nn As String)
    Dim x As Integer
        
    TChart2.Series(0).Name = nn
            
    'Cartesian
    TChart2.Series(0).Clear
    TChart2.Series(0).Active = True
        
    For x = 0 To CInt(Nx / 4) - 1
       TChart2.Series(0).AddXY dblX(x, 0), dblY(x, 0), "", 0
    Next x
   
End Function




Private Function plot_clear()
    TChart1.Series(0).Clear
    TChart1.Series(0).Active = False
    TChart1.Series(0).Name = ""
    
    TChart2.Series(0).Clear
    TChart2.Series(0).Active = False
    TChart2.Series(0).Name = ""
End Function

Private Function pause_sec(dblPauseTime As Double)
    Dim ATime As Double
    ATime = Timer
        Do While Timer < ATime + dblPauseTime
            DoEvents
        Loop
End Function

Public Function init()
On Error GoTo Err
    Dim svar As String
    
    If MSComm1.PortOpen = True Then
        MSComm1.PortOpen = False
    End If
    
    If MSComm1.PortOpen = False Then
        MSComm1.Settings = "115200,N,8,1" 'Sets and returns the baud rate, parity, data bits, and stop bits as a string.
        MSComm1.CommPort = Val(txtCOMport.Text)
        MSComm1.PortOpen = True
        MSComm1.InputLen = 1
        MSComm1.RThreshold = 1
    End If
    
    MSComm1.InBufferCount = 0
    
    '''System init
    serial_write "INIT" & Chr(13)
    pause_sec 0.1
    svar = serial_read(5)
    MsgBox "Radar initialized:" & svar
    
    cmdInfo.Enabled = True
    cmdMeasCont.Enabled = True
    m_bln_go = False
Exit Function
Err:
    Select Case Err.Number
        Case 8002
            MsgBox "Error: init - Invalid port number", vbInformation
        Case Else
            MsgBox "Unknown error: init", vbInformation
    End Select
End Function

Public Function measure(Ny As Integer) As Double()
On Error GoTo Err
    Dim svar As String
    Dim tmp As String
    Dim x As Integer
    Dim dblY() As Double
    ReDim dblY(Ny, 1)
        
        
        
    serial_write "TRIG:ARM" & Chr(13)
    pause_sec 0.2
    
    svar = serial_read(0.2) ' read out OK:s and throw away
    
    serial_write "TRACE:DATA ?" & Chr(13)
    'serial_write "TRACE:RAW ?" & Chr(13)
    pause_sec 0.2
    
    svar = serial_read(1)
'    svar = svar & serial_read(1)
    svar = Trim(svar)
    x = 0
    
    'if some text on the output before data - remove!
    While IsNumeric(Left(svar, 1)) = False
        svar = Right(svar, Len(svar) - 1)
    Wend
    
    While svar <> "" And x < Ny
        tmp = Left(svar, InStr(svar, Chr(13)) - 1)
        svar = Right(svar, Len(svar) - InStr(svar, Chr(13)))
        dblY(x, 0) = CDbl(tmp) '- 49000
        x = x + 1
    Wend
    
 '   'Remove average
 '   Dim sum1 As Double
 '   sum1 = 0
 '   For x = 0 To Ny
 '       sum1 = sum1 + dblY(x, 0)
 '   Next x
 '   sum1 = sum1 / Ny
 '
 '   For x = 0 To Ny
 '       dblY(x, 0) = dblY(x, 0) - sum1
 '   Next x
    
    measure = dblY
Exit Function
Err:
    Select Case Err.Number
        Case Else
            MsgBox "Unknown error: measure", vbInformation
    End Select
End Function

''''''''''''
'  Serial
''''''''''''

Private Function serial_read(dblTimeout As Double) As String
    Dim ATime As Double
    ATime = Timer
    pause_sec 1
    While m_flag_serial = False And Timer < ATime + dblTimeout
        DoEvents
    Wend
    'm_temp = Replace(m_temp, vbNewLine, "")
    serial_read = m_temp
    
  '  List1.AddItem m_temp
  '  List1.ListIndex = List1.ListCount - 1
    
    m_temp = ""
End Function

Private Function serial_write(strCommand As String)
    m_flag_serial = False
    MSComm1.Output = strCommand
End Function





Private Sub cmdSetPoints_Click()
On Error GoTo cancel
    Dim intPoints As Integer
    Dim svar As String
    
    intPoints = CInt(cboSamples.Text)
    
    If intPoints > 0 And intPoints < 1502 Then
        serial_write "FREQUENCY:POINTS " & CStr(intPoints) & Chr(13)
        pause_sec 0.1
    End If
    
svar = serial_read(5) ' read out OK:s and throw away
Exit Sub
cancel:
    MsgBox "Error in Set Points"
End Sub

Private Sub cmdSetStart_Click()
On Error GoTo cancel
    Dim dblStart As Double
    Dim svar As String
    
    dblStart = CDbl(txtStart.Text)
    
    If dblStart >= 76 And dblStart <= 77 Then
        serial_write "FREQUENCY:START " & CStr(dblStart) & "e9" & Chr(13)
        pause_sec 0.1
    End If
svar = serial_read(5) ' read out OK:s and throw away
Exit Sub
cancel:
    MsgBox "Error in Set start"
End Sub

Private Sub cmdSetStop_Click()
On Error GoTo cancel
    Dim dblStop As Double
    Dim svar As String
    
    dblStop = CDbl(txtStop.Text)
    
    If dblStop >= 76 And dblStop <= 77 Then
        serial_write "FREQUENCY:STOP " & CStr(dblStop) & "e9" & Chr(13)
        pause_sec 0.1
    End If
svar = serial_read(5) ' read out OK:s and throw away
Exit Sub
cancel:
    MsgBox "Error in Set Points"
End Sub

Private Sub cmdSetTime_Click()
On Error GoTo cancel
    Dim svar As String
        
    serial_write "SWEEP:TIME " & txtSweepTime & Chr(13)
    pause_sec 0.1
    
    svar = serial_read(5) ' read out OK:s and throw away
Exit Sub
cancel:
    MsgBox "Error in Set Sweep time"
End Sub

Private Sub cmdStartMeas_Click()
    Dim int_angle As Integer
    Dim stop_angle As Integer
    Dim int_Step As Integer
    Dim dblX() As Double
    Dim dblY() As Double
    Dim Nx As Integer
    Dim i As Integer
    Dim x As Integer
    
    Dim fso 'As FileSystemObject
    Dim txtfil
    Dim strFilnamn As String
    Dim strFilnamn2 As String
    
    
    
    m_bln_go = True
    
    Set fso = CreateObject("Scripting.FileSystemObject")
    With CommonDialog1
        .CancelError = True
        .Filter = "Text |*.txt"
        .FilterIndex = 1
        .ShowSave
        strFilnamn = CStr(.FileName)
    End With
    
    
    Nx = CInt(txtPointRead)
    ReDim dblX(Nx, 1)
    
    For x = 0 To Nx - 1
        dblX(x, 0) = x + 1
    Next x
    
    plot_clear
    
    int_Step = CInt(cboAngles.Text)
    int_angle = CInt(txtAngleStart.Text)
    stop_angle = CInt(txtAngleStop.Text)
    While int_angle <= stop_angle And m_bln_go
        If chkDebug.Value = 0 Then
            uclPlatform1.MovePlatform int_angle
        Else
            'MsgBox "wait"
            txtDebugAngle.Text = int_angle
        End If
        dblY = measure(Nx)
        plot_data_Freq dblX, Nx, dblY, ""
        strFilnamn2 = Left(strFilnamn, Len(strFilnamn) - 4) & "_" & CStr(int_angle) & ".txt"
        Set txtfil = fso.CreateTextFile(strFilnamn2, True)
        For i = 0 To Nx
            txtfil.writeline CStr(dblY(i, 0)) '& " " & CStr(mdbl_data_to_save_D(i, 0))
        Next
        txtfil.Close
    
        
        pause_sec CDbl(txtPause.Text)
        
        int_angle = int_angle + int_Step
    Wend
    
    
    MsgBox "Done!"
    
    
    
    
    
    
    
    
    
End Sub

Private Sub cmdStopMeas_Click()
    If vbYes = MsgBox("Du you want to stop the sweep?", vbYesNo, "Stop sweep") Then
        m_bln_go = False
    End If
End Sub

Private Sub Command1_Click()
    txtConvDeg2 = CStr(Round(360 / 9600 * CDbl(txtConvSteps2), 3))
End Sub

Private Sub Form_Initialize()
    Dim i As Double
    
    Set cFourier = New clsFourier
      
    cboSamples.Clear
    cboSamples.AddItem "64"
    cboSamples.AddItem "128"
    cboSamples.AddItem "256"
    cboSamples.AddItem "512"
    cboSamples.AddItem "1024"
    
    cmdSave.Enabled = False
    cmdInfo.Enabled = False
    cmdMeasCont.Enabled = False
    
 
    size_components
    
    cboAngles.Clear
    For i = 1 To 33
        cboAngles.AddItem (CStr(i))
    Next i
    cboAngles.AddItem (CStr(39))
    cboAngles.AddItem (CStr(52))
    cboAngles.AddItem (CStr(65))
    cboAngles.AddItem (CStr(78))
    cboAngles.AddItem (CStr(104))
    cboAngles.AddItem (CStr(131))
    cboAngles.AddItem (CStr(157))
    cboAngles.AddItem (CStr(261))
    
End Sub

Private Function prep_fft() As Boolean
    Dim blnfft As Boolean
    blnfft = False
    If cboSamples.Text <> "" Then
        NumSamples = CInt(cboSamples.Text)
    End If
    If NumSamples = 64 Or NumSamples = 128 Or NumSamples = 256 Or NumSamples = 512 Or NumSamples = 1024 Then
        cFourier.NumberOfSamples = NumSamples
        blnfft = True
    End If
    prep_fft = blnfft
End Function


Private Sub Form_Resize()
    size_components
End Sub
Private Function size_components()
    TChart1.Width = frmRadar.Width - 300
    TChart2.Width = frmRadar.Width - 300
    List1.Width = frmRadar.Width - 300
'    TChart1.Height = (frmRadar.Height - List1.Height - Frame1.Height - 800) / 2
 '   TChart2.Height = (frmRadar.Height - List1.Height - Frame1.Height - 800) / 2
 '   TChart2.Top = TChart1.Top + TChart1.Height
 '   List1.Top = TChart2.Top + TChart2.Height
End Function



Private Sub MSComm1_OnComm()
'On Error GoTo now_empty
Dim inn As String

inn = MSComm1.Input

m_temp = m_temp + inn

If Right(inn, 1) = vbCr Then
  '  List1.AddItem m_temp
  '  List1.ListIndex = List1.ListCount - 1
    m_flag_serial = True
   
End If
'now_empty:
 '   m_flag_serial = True
End Sub

Private Function fft(dblY, Nx) As Double()

  Dim i     As Long
  Dim Omega As Long
  Dim res() As Double
  ReDim res(Nx, 1)
  
    cFourier.TransformReverse = False
    Omega = NumSamples / 10
    For i = 1 To NumSamples
        'pure sine
        'cFourier.RealIn(i) = Sin(Omega * i / NumSamples)
        
        'square
        'cFourier.RealIn(i) = Sgn(Sin(Omega * i / NumSamples)) '+ (Rnd - Rnd) * 0.1 'noise
        
        'radar response
        cFourier.RealIn(i) = dblY(i - 1, 0)
        cFourier.ImagIn(i) = 0 'we have no imaginary part so we just supply a zero
    Next i

    For i = 1 To NumSamples
        res(i - 1, 0) = 20 * Log(cFourier.ComplexOut(i) + 0.000000000000001) / Log(10) ' or Realout?
    Next i
    
    fft = res

End Function
